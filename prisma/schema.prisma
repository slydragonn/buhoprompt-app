// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  // Enable Edge compatibility for Vercel Edge functions and Middleware
  // previewFeatures = ["fullTextSearchPostgres", "multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Optional: Enable connection pooling
  // directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  clerkId       String      @unique
  createdAt     DateTime    @default(now())
  prompts       Prompt[]
  templates     Template[]
  userToken     UserToken?  // One-to-one relation
  
  @@index([clerkId])
}

model Prompt {
  id                 String    @id @default(cuid())
  title              String
  description        String?   @db.Text
  content            String
  prevContent        String    @default("")
  chatHistory        Json?     // [{req: "", res: ""}]
  model              String    // like Chatgpt | Gemini | Claude | Deepseek | Sora | etc...
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId         String?
  isFavorite         Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  @@unique([title, userId], name: "title_userId")
  @@index([userId])
  @@index([templateId])
  @@index([createdAt(sort: Desc)])
}

model Template {
  id            String    @id @default(cuid())
  title         String
  content       String
  description   String?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isOfficial    Boolean   @default(false)
  model         String    
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([title, userId], name: "title_userId")
  @@index([userId])
  @@index([isOfficial, createdAt(sort: Desc)])
}

model UserToken {
  id            String      @id @default(cuid())
  userId        String      @unique
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokensUsed    Int         @default(0)
  tokensLimit   Int         @default(10)
  resetAt       DateTime    @default(now())  // Date when token count resets
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([userId])
}