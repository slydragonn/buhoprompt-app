// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  // Enable Edge compatibility for Vercel Edge functions and Middleware
  // previewFeatures = ["fullTextSearchPostgres", "multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Optional: Enable connection pooling
  // directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  clerkId       String      @unique
  email         String      @unique
  name          String?
  preferences   Json?       // Stores user preferences (theme, language, etc.)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  prompts       Prompt[]
  templates     Template[]
  userToken     UserToken?  // One-to-one relation
  
  @@index([email])
  @@index([clerkId])
}

model Prompt {
  id            String      @id @default(cuid())
  title         String
  content       String      @db.Text
  description   String?     @db.Text
  response      String?     @db.Text  // Response generated by AI
  model         String      // Target AI model
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId    String?
  template      Template?   @relation(fields: [templateId], references: [id], onDelete: SetNull)
  categories    Category[]  @relation("PromptToCategory")
  tags          Tag[]       @relation("PromptToTag")
  isPublic      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([title, userId], name: "title_userId")
  @@index([userId])
  @@index([templateId])
  @@index([isPublic, createdAt(sort: Desc)])
}

model Template {
  id            String      @id @default(cuid())
  title         String
  content       String      @db.Text
  description   String?     @db.Text
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId    String
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  prompts       Prompt[]
  isOfficial    Boolean     @default(false)
  isPublic      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([title, userId], name: "title_userId")
  @@index([userId])
  @@index([categoryId])
  @@index([isPublic, isOfficial, createdAt(sort: Desc)])
}

model Category {
  id            String      @id @default(cuid())
  name          String      @unique
  description   String?     @db.Text
  templates     Template[]
  prompts       Prompt[]    @relation("PromptToCategory")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([name])
}

model Tag {
  id            String      @id @default(cuid())
  name          String      @unique
  prompts       Prompt[]    @relation("PromptToTag")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([name])
}

model UserToken {
  id            String      @id @default(cuid())
  userId        String      @unique
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokensUsed    Int         @default(0)
  tokensLimit   Int         @default(1000)
  resetAt       DateTime    @default(now())  // Date when token count resets
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([userId])
}